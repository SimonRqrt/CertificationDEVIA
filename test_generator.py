#!/usr/bin/env python3
"""
Script de test pour le g√©n√©rateur de plans d'entra√Ænement
"""
import os
import sys

# Ajouter le r√©pertoire Django au PYTHONPATH
sys.path.insert(0, '/Users/sims/Documents/Simplon_DEV_IA/Certification/CertificationDEVIA/E3_model_IA/backend/django_app')

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'coach_ai_web.settings')

import django
django.setup()

from django.contrib.auth import get_user_model
from coaching.views import simple_plan_generator
from django.test import RequestFactory
from django.http import HttpRequest

User = get_user_model()

def test_generator():
    print("üß™ Test du g√©n√©rateur de plans...")
    
    # Cr√©er ou r√©cup√©rer un utilisateur de test
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={
            'email': 'test@coach-ai.com',
            'first_name': 'Test',
            'last_name': 'User'
        }
    )
    
    if created:
        user.set_password('secure123')
        user.save()
        print(f"‚úÖ Utilisateur cr√©√©: {user.username}")
    else:
        print(f"‚úÖ Utilisateur existant: {user.username}")
    
    # Cr√©er une requ√™te POST simul√©e
    factory = RequestFactory()
    
    post_data = {
        'goal': '10K',
        'level': 'Interm√©diaire',
        'sessions': '3',
        'target_date': '2025-09-01',
        'additional_notes': 'Test automatique du g√©n√©rateur'
    }
    
    request = factory.post('/api/v1/coaching/simple-plan/', post_data)
    request.user = user
    
    print("üìù Donn√©es de test:")
    for key, value in post_data.items():
        print(f"   {key}: {value}")
    
    try:
        # Appeler la vue
        print("\nüöÄ Appel du g√©n√©rateur...")
        response = simple_plan_generator(request)
        print(f"‚úÖ R√©ponse re√ßue: {response.status_code}")
        
        if hasattr(response, 'content'):
            content = response.content.decode('utf-8')
            print(f"üìÑ Longueur du contenu: {len(content)} caract√®res")
            
            # Rechercher diff√©rents indicateurs de plan
            plan_indicators = ['Plan d\'entra√Ænement', 'plan d\'entra√Ænement', 'Programme hebdomadaire', 'planning', 'Coach Michael']
            table_indicators = ['| Jour |', '|---|', 'Lundi', 'Mardi', 'Mercredi']
            
            plan_found = any(indicator in content for indicator in plan_indicators)
            table_found = any(indicator in content for indicator in table_indicators)
            
            # V√©rifier d'abord l'origine de la r√©ponse
            if 'agent ia avanc√©' in content.lower():
                print("‚úÖ Appel FastAPI r√©ussi")
            else:
                print("‚ö†Ô∏è Appel FastAPI √©chou√© - utilisation du fallback local")
            
            if plan_found:
                print("‚úÖ Plan g√©n√©r√© avec succ√®s!")
                if table_found:
                    print("‚úÖ Tableau d'entra√Ænement d√©tect√©")
                else:
                    print("‚ö†Ô∏è Format de tableau non d√©tect√©")
            else:
                print("‚ö†Ô∏è Plan non d√©tect√© dans la r√©ponse")
                # Afficher un aper√ßu du contenu pour debug
                print(f"üìã Aper√ßu (200 premiers caract√®res): {content[:200]}...")
                
                # Chercher des messages d'erreur sp√©cifiques
                if 'erreur' in content.lower() or 'error' in content.lower():
                    print("‚ö†Ô∏è Message d'erreur d√©tect√© dans la r√©ponse")
                if 'fallback' in content.lower():
                    print("‚ö†Ô∏è Mode fallback activ√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_generator()
    sys.exit(0 if success else 1)