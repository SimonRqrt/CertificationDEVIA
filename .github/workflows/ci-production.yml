name: CI Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-production:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libpq-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run comprehensive tests
        run: |
          python -m pytest tests/test_basic.py -v
          
          # Tests sp√©cifiques production
          cd E1_gestion_donnees/api_rest
          python manage.py check --deploy
          
          cd ../../E3_model_IA/backend/fastapi_app
          python -c "import api_service; print('FastAPI production ready')"
          
          cd ../../../E4_app_IA/frontend/streamlit_app
          python -c "import app_streamlit; print('Streamlit production ready')"

  security-check:
    runs-on: ubuntu-latest
    needs: test-production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Security scan
        run: |
          echo "üîí V√©rification de s√©curit√©..."
          # V√©rifier les secrets dans le code
          if grep -r "password\|secret\|key" . --exclude-dir=.git --exclude-dir=.venv | grep -v "requirements\|test"; then
            echo "‚ö†Ô∏è Attention: mots-cl√©s sensibles d√©tect√©s dans le code"
          else
            echo "‚úÖ Aucun secret d√©tect√© dans le code"
          fi

  docker-production:
    runs-on: ubuntu-latest
    needs: [test-production, security-check]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production images
        run: |
          docker build -f deployment/django.Dockerfile -t coach-ai-django:prod .
          docker build -f deployment/fastapi.Dockerfile -t coach-ai-fastapi:prod .
          docker build -f deployment/streamlit.Dockerfile -t coach-ai-streamlit:prod .

      - name: Test production compose
        run: |
          cd deployment
          docker compose -f docker-compose-production.yml config 