name: CD Production

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy-production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create production .env file
        run: |
          cat <<EOF > .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          API_KEY=${{ secrets.API_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=localhost,127.0.0.1
          EOF

      - name: Deploy to production
        run: |
          echo "üöÄ D√©ploiement PRODUCTION en cours..."
          
          cd deployment
          
          # Arr√™ter et nettoyer
          docker compose -f docker-compose-production.yml down || true
          docker system prune -f
          
          # D√©ployer avec la config production
          docker compose -f docker-compose-production.yml up -d --build
          
          # Attendre le d√©marrage
          sleep 45
          
          # V√©rifier les services
          docker compose -f docker-compose-production.yml ps

      - name: Production health check
        run: |
          echo "üè• Health check PRODUCTION..."
          
          # Tests de sant√© avec timeout
          timeout 10 curl -f http://localhost:8002/admin/ || echo "‚ö†Ô∏è Django"
          timeout 10 curl -f http://localhost:8000/docs || echo "‚ö†Ô∏è FastAPI"
          timeout 10 curl -f http://localhost:8501/ || echo "‚ö†Ô∏è Streamlit"

      - name: Production status
        run: |
          echo "‚úÖ PRODUCTION d√©ploy√©e sur main"
          echo "üåê Services:"
          echo "   - Django: http://localhost:8002"
          echo "   - FastAPI: http://localhost:8000"
          echo "   - Streamlit: http://localhost:8501" 