name: Build and Test

on:
  push:
    branches: [ main, developp ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Create test environment file
      run: |
        cat > .env << EOF
        DB_TYPE=sqlite
        DB_NAME=test_garmin_data
        API_HOST=localhost
        API_PORT=8000
        API_DEBUG=true
        OPENAI_API_KEY=test-key
        GARMIN_EMAIL=test@example.com
        GARMIN_PASSWORD=test-password
        API_KEY=test-api-key
        EOF

    - name: Run database initialization
      run: |
        python -c "
        from E1_gestion_donnees.db_manager import create_db_engine, create_tables
        engine = create_db_engine()
        create_tables(engine)
        print('Database initialized successfully')
        "

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=src --cov=E1_gestion_donnees --cov=E3_model_IA --cov=E4_app_IA --cov-report=xml --cov-report=html

    - name: Test data manager
      run: |
        python -m pytest tests/test_data_manager.py -v

    - name: Lint with pylint (optional)
      run: |
        pip install pylint
        pylint src/ --exit-zero --output-format=text --reports=no
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        docker build -f backend.Dockerfile -t coach-ai-backend:latest .

    - name: Build frontend Docker image
      run: |
        docker build -f frontend.Dockerfile -t coach-ai-frontend:latest .

    - name: Test Docker Compose
      run: |
        # Create a test .env file
        cat > .env << EOF
        DB_TYPE=sqlite
        DB_NAME=garmin_data
        API_HOST=0.0.0.0
        API_PORT=8000
        API_DEBUG=false
        OPENAI_API_KEY=test-key
        GARMIN_EMAIL=test@example.com
        GARMIN_PASSWORD=test-password
        API_KEY=test-api-key
        EOF
        
        # Test docker-compose syntax
        docker-compose config

    - name: Run security scan
      run: |
        pip install safety bandit
        safety check --file requirements.txt --continue-on-error
        bandit -r src/ -f json -o bandit-report.json --exit-zero
      continue-on-error: true

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json