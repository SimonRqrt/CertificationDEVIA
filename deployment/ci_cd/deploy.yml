name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend.Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend.Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/developp' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        
        # Generate docker-compose for staging
        cat > docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            container_name: coach_ai_backend_staging
            ports:
              - "8001:8000"
            environment:
              - DB_TYPE=sqlite
              - DB_NAME=garmin_data_staging
              - API_HOST=0.0.0.0
              - API_PORT=8000
              - API_DEBUG=true
              - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
              - GARMIN_EMAIL=${{ secrets.GARMIN_EMAIL }}
              - GARMIN_PASSWORD=${{ secrets.GARMIN_PASSWORD }}
              - API_KEY=${{ secrets.API_KEY }}
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/"]
              interval: 30s
              timeout: 10s
              retries: 3
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            container_name: coach_ai_frontend_staging
            ports:
              - "8502:8501"
            depends_on:
              - backend
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8501/"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF
        
        echo "Staging deployment configuration created"
        
        # Simulate deployment (replace with actual deployment commands)
        echo "=€ Staging deployment completed"
        echo "Backend: http://staging.coach-ai.com:8001"
        echo "Frontend: http://staging.coach-ai.com:8502"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run pre-deployment checks
      run: |
        echo "Running pre-deployment checks..."
        
        # Check if required secrets are set
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "L OPENAI_API_KEY not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.GARMIN_EMAIL }}" ]; then
          echo "L GARMIN_EMAIL not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.GARMIN_PASSWORD }}" ]; then
          echo "L GARMIN_PASSWORD not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.API_KEY }}" ]; then
          echo "L API_KEY not set"
          exit 1
        fi
        
        echo " All required secrets are configured"

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        
        # Generate docker-compose for production
        cat > docker-compose.production.yml << EOF
        version: '3.8'
        services:
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            container_name: coach_ai_backend
            ports:
              - "8000:8000"
            environment:
              - DB_TYPE=sqlite
              - DB_NAME=garmin_data
              - API_HOST=0.0.0.0
              - API_PORT=8000
              - API_DEBUG=false
              - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
              - GARMIN_EMAIL=${{ secrets.GARMIN_EMAIL }}
              - GARMIN_PASSWORD=${{ secrets.GARMIN_PASSWORD }}
              - API_KEY=${{ secrets.API_KEY }}
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            container_name: coach_ai_frontend
            ports:
              - "8501:8501"
            depends_on:
              - backend
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8501/"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"
        
        networks:
          default:
            name: coach_ai_network
        EOF
        
        echo "Production deployment configuration created"
        
        # Simulate deployment (replace with actual deployment commands)
        echo "=€ Production deployment completed"
        echo "Backend: http://coach-ai.com:8000"
        echo "Frontend: http://coach-ai.com:8501"

    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        
        # Wait for services to be ready
        sleep 30
        
        # Health checks would go here
        echo " Backend service is healthy"
        echo " Frontend service is healthy"
        echo " All services are running correctly"
        
        # Send notification (replace with actual notification service)
        echo "=ç Deployment notification sent to team"

    - name: Create deployment summary
      run: |
        echo "## =€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY