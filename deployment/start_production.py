#!/usr/bin/env python3
"""
Script de d√©marrage pour la production Coach AI
G√®re le d√©ploiement complet avec Azure SQL Server
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path

def run_command(command, description="", check=True):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\nüîÑ {description or command}")
    print("=" * 60)
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(f"‚ö†Ô∏è  {result.stderr}")
    
    if check and result.returncode != 0:
        print(f"‚ùå Erreur lors de l'ex√©cution de: {command}")
        sys.exit(1)
    
    return result

def check_service_health(url, service_name, timeout=60):
    """V√©rifie la sant√© d'un service"""
    print(f"\nüè• V√©rification de {service_name}...")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {service_name} est op√©rationnel")
                return True
        except requests.RequestException:
            pass
        
        print(".", end="", flush=True)
        time.sleep(2)
    
    print(f"‚ùå {service_name} n'est pas accessible apr√®s {timeout}s")
    return False

def main():
    """Fonction principale de d√©marrage"""
    
    print("üöÄ D√©marrage de Coach AI - Production")
    print("=====================================")
    
    # V√©rifier le r√©pertoire de travail
    if not Path("docker-compose-prod.yml").exists():
        print("‚ùå docker-compose-prod.yml non trouv√©")
        print("Assurez-vous d'√™tre dans le r√©pertoire deployment/")
        sys.exit(1)
    
    # V√©rifier le fichier .env
    env_file = Path("../.env")
    if not env_file.exists():
        print("‚ùå Fichier .env non trouv√©")
        print("Cr√©ez le fichier .env avec vos configurations")
        sys.exit(1)
    
    # Arr√™ter les services existants
    print("\nüõë Arr√™t des services existants...")
    run_command("docker compose -f docker-compose-prod.yml down", check=False)
    
    # Nettoyer les conteneurs orphelins
    print("\nüßπ Nettoyage des conteneurs orphelins...")
    run_command("docker compose -f docker-compose-prod.yml down --remove-orphans", check=False)
    
    # Construire les images
    print("\nüèóÔ∏è  Construction des images Docker...")
    run_command("docker compose -f docker-compose-prod.yml build --no-cache")
    
    # D√©marrer les services
    print("\nüöÄ D√©marrage des services...")
    run_command("docker compose -f docker-compose-prod.yml up -d")
    
    # Attendre que les services soient pr√™ts
    print("\n‚è±Ô∏è  Attente du d√©marrage des services...")
    time.sleep(30)
    
    # V√©rifier la sant√© des services
    services = [
        ("http://localhost:8002/admin/", "Django Admin"),
        ("http://localhost:8000/docs", "FastAPI Documentation"),
        ("http://localhost:8501/", "Streamlit Interface"),
        ("http://localhost/health", "Nginx Proxy")
    ]
    
    all_healthy = True
    for url, name in services:
        if not check_service_health(url, name):
            all_healthy = False
    
    # Afficher le statut final
    print("\n" + "=" * 60)
    if all_healthy:
        print("üéâ D√©ploiement r√©ussi !")
        print("\nüìã Services disponibles:")
        print("‚Ä¢ Interface principale : http://localhost/")
        print("‚Ä¢ Django Admin : http://localhost:8002/admin/")
        print("‚Ä¢ API Documentation : http://localhost:8000/docs")
        print("‚Ä¢ Chat IA Streamlit : http://localhost:8501/")
        print("‚Ä¢ Plan simplifi√© : http://localhost/api/v1/coaching/simple-plan/")
        
        print("\nüóÉÔ∏è  Base de donn√©es : Azure SQL Server")
        print("ü§ñ Agent IA : Coach Michael avec RAG")
        print("üê≥ Architecture : Docker Compose + Nginx")
        
    else:
        print("‚ùå Certains services ne sont pas accessibles")
        print("V√©rifiez les logs avec: docker compose -f docker-compose-prod.yml logs")
    
    # Afficher les logs r√©cents
    print("\nüìú Logs r√©cents:")
    run_command("docker compose -f docker-compose-prod.yml logs --tail=5", check=False)

if __name__ == "__main__":
    main()