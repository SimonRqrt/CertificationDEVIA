#!/usr/bin/env python3
"""
Script de d√©ploiement production pour CertificationDEVIA
Teste et valide la configuration Supabase avant d√©ploiement
"""

import os
import sys
import time
import subprocess
import psycopg2
from pathlib import Path

def load_env_vars():
    """Charge les variables d'environnement depuis .env"""
    env_file = Path(__file__).parent.parent / '.env'
    
    if not env_file.exists():
        print("‚ùå Fichier .env introuvable")
        return False
        
    with open(env_file, 'r') as f:
        for line in f:
            if '=' in line and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                os.environ[key] = value
    
    print("‚úÖ Variables .env charg√©es")
    return True

def test_supabase_connection():
    """Test la connexion Supabase PostgreSQL"""
    print("\n=== TEST CONNEXION SUPABASE ===")
    
    try:
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL non d√©finie")
            return False
            
        print(f"Test connexion: {database_url[:50]}...")
        
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Test version PostgreSQL
        cursor.execute('SELECT version()')
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL: {version[:60]}...")
        
        # Test donn√©es existantes
        cursor.execute('SELECT COUNT(*) FROM activities_activity')
        count = cursor.fetchone()[0]
        print(f"‚úÖ Activit√©s trouv√©es: {count}")
        
        # Test performance
        start_time = time.time()
        cursor.execute('SELECT COUNT(*) FROM django_session')
        duration = time.time() - start_time
        print(f"‚úÖ Performance: {duration*1000:.1f}ms")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur Supabase: {e}")
        return False

def check_production_requirements():
    """V√©rifie les pr√©requis pour le d√©ploiement production"""
    print("\n=== V√âRIFICATION PR√âREQUIS PRODUCTION ===")
    
    requirements = {
        'OPENAI_API_KEY': os.environ.get('OPENAI_API_KEY', '').startswith('sk-'),
        'SECRET_KEY': len(os.environ.get('SECRET_KEY', '')) >= 32,
        'DB_TYPE': os.environ.get('DB_TYPE') == 'postgresql',
        'DATABASE_URL': 'postgresql://' in os.environ.get('DATABASE_URL', ''),
    }
    
    all_ok = True
    for req, status in requirements.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {req}: {'OK' if status else 'MANQUANT'}")
        if not status:
            all_ok = False
    
    return all_ok

def build_production_images():
    """Build les images Docker pour la production"""
    print("\n=== BUILD IMAGES DOCKER PRODUCTION ===")
    
    try:
        # Changer vers le r√©pertoire de d√©ploiement
        os.chdir(Path(__file__).parent)
        
        # Build avec cache
        cmd = [
            'docker', 'compose', '-f', 'docker-compose-production.yml', 
            'build', '--parallel'
        ]
        
        print(f"Commande: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Images Docker build√©es avec succ√®s")
            return True
        else:
            print(f"‚ùå Erreur build: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur build: {e}")
        return False

def deploy_production():
    """D√©ploie en mode production"""
    print("\n=== D√âPLOIEMENT PRODUCTION ===")
    
    try:
        # Variables d'environnement production
        prod_env = os.environ.copy()
        prod_env.update({
            'PRODUCTION_MODE': 'true',
            'DISABLE_SQLITE_FALLBACK': 'true',
            'DEBUG': 'false'
        })
        
        # D√©marrer les services
        cmd = [
            'docker', 'compose', '-f', 'docker-compose-production.yml',
            'up', '-d'
        ]
        
        print(f"Commande: {' '.join(cmd)}")
        result = subprocess.run(cmd, env=prod_env, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Services d√©ploy√©s en production")
            return True
        else:
            print(f"‚ùå Erreur d√©ploiement: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur d√©ploiement: {e}")
        return False

def test_production_deployment():
    """Test le d√©ploiement production"""
    print("\n=== TEST D√âPLOIEMENT PRODUCTION ===")
    
    # Attendre que les services d√©marrent
    print("Attente d√©marrage services (30s)...")
    time.sleep(30)
    
    # Tests des endpoints
    tests = [
        ('http://localhost/health', 'Nginx'),
        ('http://localhost:8002/health/', 'Django'),
        ('http://localhost:8000/health', 'FastAPI'),
        ('http://localhost:8501/_stcore/health', 'Streamlit'),
    ]
    
    all_ok = True
    for url, service in tests:
        try:
            import urllib.request
            response = urllib.request.urlopen(url, timeout=10)
            status = "‚úÖ" if response.getcode() == 200 else "‚ùå"
            print(f"{status} {service}: {response.getcode()}")
        except Exception as e:
            print(f"‚ùå {service}: {e}")
            all_ok = False
    
    return all_ok

def main():
    """Fonction principale"""
    print("üöÄ D√âPLOIEMENT PRODUCTION CertificationDEVIA")
    print("=" * 50)
    
    # √âtapes de validation
    steps = [
        ("Chargement variables environnement", load_env_vars),
        ("Test connexion Supabase", test_supabase_connection),
        ("V√©rification pr√©requis", check_production_requirements),
        ("Build images Docker", build_production_images),
        ("D√©ploiement production", deploy_production),
        ("Test d√©ploiement", test_production_deployment),
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if not step_func():
            print(f"\n‚ùå √âCHEC: {step_name}")
            print("\nüõë D√©ploiement interrompu")
            sys.exit(1)
    
    print("\nüéâ D√âPLOIEMENT PRODUCTION R√âUSSI!")
    print("\nüìä URLs de production:")
    print("- Interface principale: http://localhost/")
    print("- API Django: http://localhost:8002/")
    print("- API FastAPI: http://localhost/api/v2/")
    print("- Chat Streamlit: http://localhost/chat/")
    print("- Admin Django: http://localhost:8002/admin/")
    
    print("\n‚úÖ Le projet utilise Supabase PostgreSQL en mode production")
    print("‚úÖ Aucun fallback SQLite en production")

if __name__ == '__main__':
    main()