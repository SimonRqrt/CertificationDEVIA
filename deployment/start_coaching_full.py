#!/usr/bin/env python3
"""
üöÄ SCRIPT DE D√âMARRAGE COMPLET - Coaching IA + Monitoring E5
D√©marre l'application compl√®te avec monitoring int√©gr√©
"""

import subprocess
import time
import requests
import sys
import os
from pathlib import Path
import json

def run_command(cmd, description, check=True):
    """Ex√©cute une commande avec gestion d'erreur"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, check=check, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - OK")
        else:
            print(f"‚ö†Ô∏è  {description} - Warning: {result.stderr}")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - ERREUR:")
        print(f"   Command: {cmd}")
        print(f"   Error: {e.stderr}")
        return None

def wait_for_service(url, service_name, timeout=60, expected_status=200):
    """Attend qu'un service soit disponible"""
    print(f"‚è≥ Attente de {service_name} ({url})...")
    
    for i in range(timeout):
        try:
            response = requests.get(url, timeout=2)
            if response.status_code == expected_status:
                print(f"‚úÖ {service_name} - Pr√™t!")
                return True
        except requests.exceptions.RequestException:
            pass
        
        time.sleep(1)
        if i % 10 == 0 and i > 0:
            print(f"   ... encore {timeout - i}s d'attente")
    
    print(f"‚ùå {service_name} - Timeout apr√®s {timeout}s")
    return False

def check_prerequisites():
    """V√©rifie les pr√©requis"""
    print("üîç V√©rification des pr√©requis...")
    
    # Docker
    if not run_command("docker --version", "Docker install√©"):
        print("‚ùå Docker requis. Installez Docker Desktop ou Docker Engine.")
        return False
    
    # Docker Compose
    if not run_command("docker compose version", "Docker Compose install√©"):
        print("‚ùå Docker Compose requis.")
        return False
    
    # Fichier .env
    env_path = Path("../.env")
    if not env_path.exists():
        print("‚ùå Fichier .env manquant. Copiez .env.example vers .env")
        return False
    
    # Variables critiques
    required_vars = ['OPENAI_API_KEY', 'SECRET_KEY', 'API_KEY']
    with open(env_path) as f:
        env_content = f.read()
        missing_vars = [var for var in required_vars if var not in env_content]
        if missing_vars:
            print(f"‚ùå Variables .env manquantes: {', '.join(missing_vars)}")
            return False
    
    print("‚úÖ Pr√©requis OK")
    return True

def setup_monitoring_structure():
    """Cr√©e la structure de monitoring"""
    print("üìÅ Configuration structure monitoring...")
    
    monitoring_dir = Path("../E5_monitoring")
    directories = [
        "prometheus/rules",
        "grafana/provisioning/datasources",
        "grafana/provisioning/dashboards",
        "grafana/dashboards", 
        "loki",
        "alertmanager",
        "promtail",
        "logs/django",
        "logs/fastapi",
        "logs/streamlit"
    ]
    
    for directory in directories:
        dir_path = monitoring_dir / directory
        dir_path.mkdir(parents=True, exist_ok=True)
    
    # Permissions pour volumes Docker
    run_command("chmod -R 777 ../E5_monitoring/logs", "Permissions logs", check=False)
    
    print("‚úÖ Structure monitoring cr√©√©e")

def start_application_stack():  
    """D√©marre la stack applicative compl√®te"""
    print("üöÄ D√©marrage de la stack compl√®te...")
    
    # Arr√™t des services existants
    run_command(
        "docker compose -f docker-compose-full.yml down --remove-orphans",
        "Arr√™t services existants",
        check=False
    )
    
    # Nettoyage des volumes orphelins
    run_command(
        "docker volume prune -f",
        "Nettoyage volumes",
        check=False
    )
    
    # Build et d√©marrage
    if not run_command(
        "docker compose -f docker-compose-full.yml up --build -d",
        "Build et d√©marrage stack compl√®te"
    ):
        return False
    
    print("‚úÖ Stack d√©marr√©e")
    return True

def wait_for_all_services():
    """Attend que tous les services soient disponibles"""
    print("‚è≥ V√©rification disponibilit√© des services...")
    
    services = [
        # Services principaux
        ("http://localhost:8002/admin/", "Django Admin"),
        ("http://localhost:8000/docs", "FastAPI Docs"),
        ("http://localhost:8501", "Streamlit UI"),
        
        # Services monitoring
        ("http://localhost:9090", "Prometheus"),
        ("http://localhost:3000", "Grafana"),
        ("http://localhost:3100/ready", "Loki"),
        ("http://localhost:9093", "AlertManager"),
        ("http://localhost:9100/metrics", "Node Exporter"),
    ]
    
    all_ready = True
    for url, name in services:
        if not wait_for_service(url, name, timeout=90):
            all_ready = False
    
    return all_ready

def setup_grafana_datasources():
    """Configure automatiquement Grafana"""
    print("üîß Configuration automatique Grafana...")
    
    time.sleep(15)  # Attente d√©marrage complet Grafana
    
    try:
        # Test connexion Grafana
        response = requests.get("http://admin:admin123@localhost:3000/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Grafana configur√© automatiquement via provisioning")
        else:
            print("‚ö†Ô∏è  Configuration Grafana manuelle requise")
    except Exception as e:
        print(f"‚ö†Ô∏è  Configuration Grafana: {e}")

def check_docker_health():
    """V√©rifie la sant√© des containers"""
    print("ü©∫ V√©rification sant√© des containers...")
    
    result = run_command(
        "docker-compose -f docker-compose-full.yml ps",
        "Status containers"
    )
    
    if result:
        lines = result.strip().split('\n')[1:]  # Skip header
        healthy_count = 0
        total_count = len(lines)
        
        for line in lines:
            if 'healthy' in line.lower() or 'up' in line.lower():
                healthy_count += 1
        
        print(f"‚úÖ Containers: {healthy_count}/{total_count} en bonne sant√©")
        
        if healthy_count < total_count:
            print("‚ö†Ô∏è  Certains containers ont des probl√®mes")
            print("   Utilisez: docker-compose -f docker-compose-full.yml logs [service]")

def display_dashboard():
    """Affiche le dashboard des services"""
    print("\n" + "="*70)
    print("üéâ COACHING IA + MONITORING E5 - PR√äT!")
    print("="*70)
    print("üè† APPLICATION PRINCIPALE")
    print("   üìä Django Dashboard    : http://localhost:8002/api/v1/core/dashboard/")
    print("   üéØ Assistant Objectifs : http://localhost:8002/api/v1/coaching/running-wizard/")
    print("   üìã Admin Django        : http://localhost:8002/admin/")
    print("   ü§ñ FastAPI Docs        : http://localhost:8000/docs")
    print("   üí¨ Streamlit Chat      : http://localhost:8501/")
    print()
    print("üîç MONITORING E5")
    print("   üìà Grafana Dashboards  : http://localhost:3000 (admin/admin123)")
    print("   üéØ Prometheus Metrics  : http://localhost:9090")
    print("   üìù Loki Logs           : http://localhost:3100 (via Grafana)")
    print("   üö® AlertManager        : http://localhost:9093")
    print("   üìä Node Exporter       : http://localhost:9100/metrics")
    print("   üîî Webhook Receiver    : http://localhost:5001 (logs alertes)")
    print()
    print("‚ö° M√âTRIQUES TEMPS R√âEL")
    print("   Django    : http://localhost:8002/metrics")
    print("   FastAPI   : http://localhost:8000/metrics")
    print()
    print("üóÇÔ∏è  LOGS")
    print("   Application : docker-compose -f docker-compose-full.yml logs -f")
    print("   Monitoring  : docker-compose -f docker-compose-full.yml logs -f grafana")
    print("="*70)

def run_integration_tests():
    """Lance des tests d'int√©gration basiques"""
    print("üß™ Tests d'int√©gration rapides...")
    
    tests = [
        ("http://localhost:8002/metrics", "Django m√©triques"),
        ("http://localhost:8000/metrics", "FastAPI m√©triques"),
        ("http://localhost:9090/api/v1/targets", "Prometheus targets"),
        ("http://localhost:3000/api/health", "Grafana sant√©"),
    ]
    
    for url, test_name in tests:
        try:
            response = requests.get(url, timeout=3)
            if response.status_code == 200:
                print(f"‚úÖ {test_name}")
            else:
                print(f"‚ö†Ô∏è  {test_name} - Status: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {test_name} - Erreur: {e}")

def main():
    """Fonction principale"""
    print("ü§ñ COACHING IA + MONITORING E5")
    print("D√©marrage application compl√®te avec monitoring")
    print("="*60)
    
    # Changement vers le r√©pertoire deployment
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    # V√©rifications
    if not check_prerequisites():
        sys.exit(1)
    
    # Setup
    setup_monitoring_structure()
    
    # D√©marrage
    if not start_application_stack():
        print("‚ùå √âchec du d√©marrage de l'application")
        sys.exit(1)
    
    # Attente des services
    if not wait_for_all_services():
        print("‚ö†Ô∏è  Certains services ne r√©pondent pas, mais continuons...")
    
    # Configuration
    setup_grafana_datasources()
    
    # V√©rifications
    check_docker_health()
    run_integration_tests()
    
    # Dashboard final
    display_dashboard()
    
    print("\nüí° CONSEILS:")
    print("   - Consultez Grafana pour les m√©triques temps r√©el")
    print("   - V√©rifiez les alertes dans AlertManager")
    print("   - Logs complets: docker-compose -f docker-compose-full.yml logs")
    print("   - Arr√™t: docker-compose -f docker-compose-full.yml down")

if __name__ == "__main__":
    main()