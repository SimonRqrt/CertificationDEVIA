# Generated by Django 4.2.7 on 2025-07-18 15:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.BigIntegerField(blank=True, null=True, unique=True, verbose_name='Activity ID')),
                ('garmin_id', models.BigIntegerField(blank=True, null=True, verbose_name='Garmin ID')),
                ('strava_id', models.BigIntegerField(blank=True, null=True, verbose_name='Strava ID')),
                ('activity_name', models.CharField(max_length=200, verbose_name='Activity name')),
                ('activity_type', models.CharField(choices=[('running', 'Running'), ('cycling', 'Cycling'), ('swimming', 'Swimming'), ('walking', 'Walking'), ('hiking', 'Hiking'), ('strength_training', 'Strength Training'), ('yoga', 'Yoga'), ('other', 'Other')], default='running', max_length=50, verbose_name='Activity type')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End time')),
                ('duration_seconds', models.IntegerField(default=0, verbose_name='Duration (seconds)')),
                ('distance_meters', models.FloatField(default=0.0, verbose_name='Distance (meters)')),
                ('average_speed', models.FloatField(blank=True, null=True, verbose_name='Average speed (m/s)')),
                ('max_speed', models.FloatField(blank=True, null=True, verbose_name='Max speed (m/s)')),
                ('average_pace', models.FloatField(blank=True, null=True, verbose_name='Average pace (s/km)')),
                ('average_hr', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)], verbose_name='Average heart rate')),
                ('max_hr', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)], verbose_name='Max heart rate')),
                ('hr_zone_1_time', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 1 time (seconds)')),
                ('hr_zone_2_time', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 2 time (seconds)')),
                ('hr_zone_3_time', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 3 time (seconds)')),
                ('hr_zone_4_time', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 4 time (seconds)')),
                ('hr_zone_5_time', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 5 time (seconds)')),
                ('elevation_gain', models.FloatField(blank=True, null=True, verbose_name='Elevation gain (m)')),
                ('elevation_loss', models.FloatField(blank=True, null=True, verbose_name='Elevation loss (m)')),
                ('start_latitude', models.FloatField(blank=True, null=True, verbose_name='Start latitude')),
                ('start_longitude', models.FloatField(blank=True, null=True, verbose_name='Start longitude')),
                ('end_latitude', models.FloatField(blank=True, null=True, verbose_name='End latitude')),
                ('end_longitude', models.FloatField(blank=True, null=True, verbose_name='End longitude')),
                ('calories', models.IntegerField(blank=True, null=True, verbose_name='Calories burned')),
                ('training_load', models.FloatField(blank=True, null=True, verbose_name='Training load')),
                ('aerobic_effect', models.FloatField(blank=True, null=True, verbose_name='Aerobic training effect')),
                ('anaerobic_effect', models.FloatField(blank=True, null=True, verbose_name='Anaerobic training effect')),
                ('steps', models.IntegerField(blank=True, null=True, verbose_name='Steps')),
                ('average_cadence', models.IntegerField(blank=True, null=True, verbose_name='Average cadence (steps/min)')),
                ('max_cadence', models.IntegerField(blank=True, null=True, verbose_name='Max cadence (steps/min)')),
                ('stride_length', models.FloatField(blank=True, null=True, verbose_name='Average stride length (m)')),
                ('vo2_max', models.FloatField(blank=True, null=True, verbose_name='VO2 Max estimate')),
                ('fastest_1k', models.FloatField(blank=True, null=True, verbose_name='Fastest 1K (seconds)')),
                ('fastest_5k', models.FloatField(blank=True, null=True, verbose_name='Fastest 5K (seconds)')),
                ('fastest_10k', models.FloatField(blank=True, null=True, verbose_name='Fastest 10K (seconds)')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature (Â°C)')),
                ('humidity', models.IntegerField(blank=True, null=True, verbose_name='Humidity (%)')),
                ('wind_speed', models.FloatField(blank=True, null=True, verbose_name='Wind speed (km/h)')),
                ('device_name', models.CharField(blank=True, max_length=100, verbose_name='Device name')),
                ('perceived_exertion', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Perceived exertion (1-10)')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('is_race', models.BooleanField(default=False, verbose_name='Is race')),
                ('is_workout', models.BooleanField(default=False, verbose_name='Is workout')),
                ('is_manual', models.BooleanField(default=False, verbose_name='Manual entry')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='Last sync')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='GPSPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('altitude', models.FloatField(blank=True, null=True, verbose_name='Altitude (m)')),
                ('timestamp', models.DateTimeField(verbose_name='Timestamp')),
                ('elapsed_time', models.IntegerField(verbose_name='Elapsed time (seconds)')),
                ('speed', models.FloatField(blank=True, null=True, verbose_name='Speed (m/s)')),
                ('heart_rate', models.IntegerField(blank=True, null=True, verbose_name='Heart rate')),
                ('cadence', models.IntegerField(blank=True, null=True, verbose_name='Cadence')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Cumulative distance (m)')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_points', to='activities.activity')),
            ],
            options={
                'verbose_name': 'GPS Point',
                'verbose_name_plural': 'GPS Points',
                'ordering': ['activity', 'timestamp'],
                'indexes': [models.Index(fields=['activity', 'timestamp'], name='activities__activit_a79bd3_idx')],
            },
        ),
        migrations.CreateModel(
            name='ActivitySplit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('split_index', models.IntegerField(verbose_name='Split index')),
                ('split_type', models.CharField(default='kilometer', max_length=50, verbose_name='Split type')),
                ('distance_meters', models.FloatField(verbose_name='Distance (meters)')),
                ('duration_seconds', models.IntegerField(verbose_name='Duration (seconds)')),
                ('average_speed', models.FloatField(blank=True, null=True, verbose_name='Average speed (m/s)')),
                ('max_speed', models.FloatField(blank=True, null=True, verbose_name='Max speed (m/s)')),
                ('average_hr', models.IntegerField(blank=True, null=True, verbose_name='Average heart rate')),
                ('max_hr', models.IntegerField(blank=True, null=True, verbose_name='Max heart rate')),
                ('elevation_gain', models.FloatField(blank=True, null=True, verbose_name='Elevation gain (m)')),
                ('elevation_loss', models.FloatField(blank=True, null=True, verbose_name='Elevation loss (m)')),
                ('average_cadence', models.IntegerField(blank=True, null=True, verbose_name='Average cadence')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='splits', to='activities.activity')),
            ],
            options={
                'verbose_name': 'Activity Split',
                'verbose_name_plural': 'Activity Splits',
                'ordering': ['activity', 'split_index'],
                'unique_together': {('activity', 'split_index')},
            },
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['user', 'start_time'], name='activities__user_id_7273b1_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['activity_type', 'start_time'], name='activities__activit_940061_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['user', 'activity_type'], name='activities__user_id_20654b_idx'),
        ),
    ]
