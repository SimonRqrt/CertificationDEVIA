#!/usr/bin/env python3
"""
Django Management Command - Pipeline Garmin unifi√©
Remplace E1_gestion_donnees/scripts/run_pipeline.py
Utilise Django ORM au lieu de SQLAlchemy
"""

import logging
import sys
from pathlib import Path
from datetime import datetime
from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils import timezone

# Imports pour les donn√©es Garmin
# Chemin depuis django_app vers la racine du projet
project_root = Path('/Users/sims/Documents/Simplon_DEV_IA/Certification/CertificationDEVIA')
sys.path.insert(0, str(project_root))

try:
    from E1_gestion_donnees.data_manager import fetch_and_process_garmin_data, compute_performance_metrics
    from src.config import GARMIN_EMAIL, GARMIN_PASSWORD
    GARMIN_IMPORTS_OK = True
except ImportError as e:
    GARMIN_IMPORTS_OK = False
    IMPORT_ERROR = str(e)

# Imports Django
from accounts.models import User
from activities.models import Activity, ActivitySplit


class Command(BaseCommand):
    help = 'Ex√©cute le pipeline de donn√©es Garmin avec Django ORM'

    def add_arguments(self, parser):
        parser.add_argument(
            '--user-id', 
            type=int, 
            default=1,
            help='ID de l\'utilisateur pour lequel ex√©cuter le pipeline'
        )

    def handle(self, *args, **options):
        user_id = options['user_id']
        
        # Configuration logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()
            ]
        )
        log = logging.getLogger(__name__)

        log.info(f"üöÄ D√©marrage du pipeline Django pour l'utilisateur ID: {user_id}")

        # V√©rifier les imports Garmin
        if not GARMIN_IMPORTS_OK:
            log.error(f"‚ùå Impossible d'importer les modules Garmin: {IMPORT_ERROR}")
            log.info("üí° Pour les tests, vous pouvez cr√©er des activit√©s manuellement")
            return

        try:
            # V√©rifier que l'utilisateur existe
            try:
                django_user = User.objects.get(id=user_id)
                log.info(f"‚úÖ Utilisateur trouv√©: {django_user.email}")
            except User.DoesNotExist:
                log.error(f"‚ùå Utilisateur ID {user_id} non trouv√©")
                return

            # --- √âTAPE 1: EXTRACTION DES DONN√âES GARMIN ---
            log.info("üì° √âtape 1/4: R√©cup√©ration des donn√©es Garmin...")
            processed_result = fetch_and_process_garmin_data(user_id=user_id, save_raw=True)
            
            if processed_result is None:
                log.error("‚ùå Aucune donn√©e r√©cup√©r√©e depuis Garmin")
                return

            activities_df, processed_activities = processed_result
            log.info(f"‚úÖ DataFrame cr√©√©: {len(activities_df)} activit√©s")

            # --- √âTAPE 2: STOCKAGE AVEC DJANGO ORM ---
            log.info("üíæ √âtape 2/4: Stockage des activit√©s avec Django ORM...")
            
            stored_count = 0
            updated_count = 0

            for activity_data in processed_activities:
                try:
                    with transaction.atomic():
                        # Convertir les donn√©es pour Django
                        garmin_id = activity_data.get('activity_id')
                        
                        # Parse de la date
                        start_time = activity_data.get('start_time')
                        if isinstance(start_time, str):
                            try:
                                start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                            except:
                                start_time = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')
                        
                        if start_time and not timezone.is_aware(start_time):
                            start_time = timezone.make_aware(start_time)

                        # Cr√©er ou mettre √† jour l'activit√©
                        activity, created = Activity.objects.update_or_create(
                            garmin_id=garmin_id,
                            defaults={
                                'user': django_user,
                                'activity_name': activity_data.get('activity_name', f'Activit√© {garmin_id}'),
                                'activity_type': activity_data.get('activity_type', 'running'),
                                'start_time': start_time,
                                'duration_seconds': int(activity_data.get('duration_seconds', 0)),
                                'distance_meters': float(activity_data.get('distance_meters', 0)),
                                'average_speed': activity_data.get('average_speed'),
                                'max_speed': activity_data.get('max_speed'),
                                'calories': int(activity_data.get('calories')) if activity_data.get('calories') else None,
                                'average_hr': int(activity_data.get('average_hr')) if activity_data.get('average_hr') else None,
                                'max_hr': int(activity_data.get('max_hr')) if activity_data.get('max_hr') else None,
                                'elevation_gain': activity_data.get('elevation_gain'),
                                'elevation_loss': activity_data.get('elevation_loss'),
                                'start_latitude': activity_data.get('start_latitude'),
                                'start_longitude': activity_data.get('start_longitude'),
                                'device_name': activity_data.get('device_name') or 'Inconnu',
                                'steps': int(activity_data.get('steps')) if activity_data.get('steps') else None,
                                'average_cadence': int(activity_data.get('average_running_cadence')) if activity_data.get('average_running_cadence') else None,
                                'max_cadence': int(activity_data.get('max_running_cadence')) if activity_data.get('max_running_cadence') else None,
                                'stride_length': activity_data.get('stride_length'),
                                'vo2_max': activity_data.get('vo2max_estime'),
                                'training_load': activity_data.get('training_load'),
                                'aerobic_effect': activity_data.get('aerobic_effect'),
                                'anaerobic_effect': activity_data.get('anaerobic_effect'),
                                'fastest_5k': activity_data.get('fastest_split_5000'),
                                'fastest_10k': activity_data.get('fastest_split_10000'),
                                'hr_zone_1_time': int(activity_data.get('hr_zone_1', 0) * 60) if activity_data.get('hr_zone_1') else None,
                                'hr_zone_2_time': int(activity_data.get('hr_zone_2', 0) * 60) if activity_data.get('hr_zone_2') else None,
                                'hr_zone_3_time': int(activity_data.get('hr_zone_3', 0) * 60) if activity_data.get('hr_zone_3') else None,
                                'hr_zone_4_time': int(activity_data.get('hr_zone_4', 0) * 60) if activity_data.get('hr_zone_4') else None,
                                'hr_zone_5_time': int(activity_data.get('hr_zone_5', 0) * 60) if activity_data.get('hr_zone_5') else None,
                                'synced_at': timezone.now()
                            }
                        )

                        if created:
                            stored_count += 1
                        else:
                            updated_count += 1

                except Exception as e:
                    log.error(f"‚ùå Erreur traitement activit√© {garmin_id}: {e}")

            log.info(f"‚úÖ Stockage termin√©: {stored_count} cr√©√©es, {updated_count} mises √† jour")

            # --- √âTAPE 3: CALCUL DES M√âTRIQUES ---
            log.info("üìä √âtape 3/4: Calcul des m√©triques de performance...")
            
            try:
                metrics_data = compute_performance_metrics(activities_df=activities_df, user_id=user_id)
                if metrics_data:
                    log.info(f"‚úÖ M√©triques calcul√©es: {len(metrics_data)} entr√©es")
                    # TODO: Stocker les m√©triques dans UserProfile si n√©cessaire
                else:
                    log.warning("‚ö†Ô∏è Aucune m√©trique calcul√©e")
            except Exception as e:
                log.error(f"‚ùå Erreur calcul m√©triques: {e}")

            # --- √âTAPE 4: R√âCAPITULATIF ---
            total_activities = Activity.objects.filter(user=django_user).count()
            latest_activity = Activity.objects.filter(user=django_user).order_by('-start_time').first()
            
            log.info("üéâ Pipeline Django termin√© avec succ√®s!")
            log.info(f"üìä Total activit√©s en base: {total_activities}")
            if latest_activity:
                log.info(f"üèÉ Derni√®re activit√©: {latest_activity.activity_name} ({latest_activity.start_time})")

        except Exception as e:
            log.error(f"üí• Erreur critique dans le pipeline: {e}")
            raise