# Generated by Django 4.2.7 on 2025-07-18 15:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='weight (kg)')),
                ('height', models.FloatField(blank=True, null=True, verbose_name='height (cm)')),
                ('preferred_activity', models.CharField(choices=[('running', 'Running'), ('cycling', 'Cycling'), ('swimming', 'Swimming'), ('triathlon', 'Triathlon'), ('other', 'Other')], default='running', max_length=50, verbose_name='preferred activity')),
                ('main_goal', models.CharField(choices=[('weight_loss', 'Weight Loss'), ('endurance', 'Endurance'), ('speed', 'Speed'), ('strength', 'Strength'), ('general_fitness', 'General Fitness'), ('competition', 'Competition')], default='general_fitness', max_length=100, verbose_name='main goal')),
                ('garmin_email', models.EmailField(blank=True, max_length=254, verbose_name='Garmin email')),
                ('strava_connected', models.BooleanField(default=False, verbose_name='Strava connected')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_premium', models.BooleanField(default=False, verbose_name='Premium user')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vma', models.FloatField(blank=True, null=True, verbose_name='VMA (km/h)')),
                ('resting_heart_rate', models.IntegerField(blank=True, null=True, verbose_name='Resting heart rate')),
                ('max_heart_rate', models.IntegerField(blank=True, null=True, verbose_name='Max heart rate')),
                ('vo2_max', models.FloatField(blank=True, null=True, verbose_name='VO2 Max')),
                ('hr_zone_1_min', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 1 Min')),
                ('hr_zone_1_max', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 1 Max')),
                ('hr_zone_2_min', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 2 Min')),
                ('hr_zone_2_max', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 2 Max')),
                ('hr_zone_3_min', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 3 Min')),
                ('hr_zone_3_max', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 3 Max')),
                ('hr_zone_4_min', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 4 Min')),
                ('hr_zone_4_max', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 4 Max')),
                ('hr_zone_5_min', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 5 Min')),
                ('hr_zone_5_max', models.IntegerField(blank=True, null=True, verbose_name='HR Zone 5 Max')),
                ('prediction_5k', models.TimeField(blank=True, null=True, verbose_name='5K prediction')),
                ('prediction_10k', models.TimeField(blank=True, null=True, verbose_name='10K prediction')),
                ('prediction_half_marathon', models.TimeField(blank=True, null=True, verbose_name='Half marathon prediction')),
                ('prediction_marathon', models.TimeField(blank=True, null=True, verbose_name='Marathon prediction')),
                ('current_fitness', models.FloatField(blank=True, null=True, verbose_name='Current fitness')),
                ('current_fatigue', models.FloatField(blank=True, null=True, verbose_name='Current fatigue')),
                ('current_form', models.FloatField(blank=True, null=True, verbose_name='Current form')),
                ('last_sync', models.DateTimeField(blank=True, null=True, verbose_name='Last sync')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
